#!/bin/bash

#################################################
# OnChainAgents.fun Auto-Installer Script
# Version: 1.0.0
# Description: Automated setup for OnChainAgents platform
#################################################

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_header() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║     OnChainAgents.fun Installer       ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${YELLOW}→${NC} $1"
}

# Check system requirements
check_requirements() {
    print_info "Checking system requirements..."
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed"
        echo "Please install Node.js >= 18.0.0 from https://nodejs.org"
        exit 1
    fi
    
    NODE_VERSION=$(node -v | cut -d'v' -f2)
    REQUIRED_NODE="18.0.0"
    
    if [ "$(printf '%s\n' "$REQUIRED_NODE" "$NODE_VERSION" | sort -V | head -n1)" != "$REQUIRED_NODE" ]; then
        print_error "Node.js version $NODE_VERSION is too old"
        echo "Please upgrade to Node.js >= 18.0.0"
        exit 1
    fi
    print_success "Node.js $NODE_VERSION found"
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        print_error "npm is not installed"
        exit 1
    fi
    
    NPM_VERSION=$(npm -v)
    REQUIRED_NPM="9.0.0"
    
    if [ "$(printf '%s\n' "$REQUIRED_NPM" "$NPM_VERSION" | sort -V | head -n1)" != "$REQUIRED_NPM" ]; then
        print_error "npm version $NPM_VERSION is too old"
        echo "Please upgrade to npm >= 9.0.0"
        exit 1
    fi
    print_success "npm $NPM_VERSION found"
}

# Install dependencies
install_dependencies() {
    print_info "Installing dependencies..."
    
    if [ -f "package.json" ]; then
        npm install
        print_success "Dependencies installed"
    else
        print_error "package.json not found"
        exit 1
    fi
}

# Build the project
build_project() {
    print_info "Building OnChainAgents..."
    
    if [ -f "tsconfig.json" ]; then
        npm run build
        print_success "Build completed"
    else
        print_error "tsconfig.json not found"
        exit 1
    fi
}

# Setup environment
setup_environment() {
    print_info "Setting up environment..."
    
    # Check if .env exists
    if [ -f ".env" ]; then
        print_info ".env file already exists"
        read -p "Do you want to update it? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return
        fi
    fi
    
    # Create .env file
    cat > .env << EOL
# OnChainAgents Configuration
# Generated by installer on $(date)

# Hive Intelligence MCP Server (Auto-configured)
HIVE_MCP_URL=https://hiveintelligence.xyz/mcp

# Logging
LOG_LEVEL=info

# Cache Settings
CACHE_TTL=3600

# Network Settings
DEFAULT_NETWORK=ethereum
MAX_RETRIES=3
TIMEOUT=30000

# Claude Code Integration
CLAUDE_CODE_ENABLED=true
EOL
    
    print_success ".env file created"
    print_info "Configuration complete! Using Hive Intelligence MCP server (no API key required)"
}

# Setup Claude Code integration
setup_claude_code() {
    print_info "Setting up Claude Code integration..."
    
    # Check if Claude Code is installed
    if command -v claude &> /dev/null; then
        print_success "Claude Code detected"
        
        # Create symlink for commands
        if [ ! -L "$HOME/.claude/commands/oca" ]; then
            mkdir -p "$HOME/.claude/commands"
            ln -s "$(pwd)/dist/cli.js" "$HOME/.claude/commands/oca"
            print_success "OnChainAgents commands linked to Claude Code"
        else
            print_info "Commands already linked"
        fi
    else
        print_info "Claude Code not detected - skipping integration"
        echo "Install Claude Code from https://claude.ai/code for full integration"
    fi
}

# Run tests
run_tests() {
    print_info "Running tests..."
    
    if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
        npm test
        print_success "Tests passed"
    else
        print_info "No tests configured"
    fi
}

# Verify installation
verify_installation() {
    print_info "Verifying installation..."
    
    # Check if build output exists
    if [ -d "dist" ]; then
        print_success "Build directory found"
    else
        print_error "Build directory not found"
        return 1
    fi
    
    # Check if main file exists
    if [ -f "dist/index.js" ]; then
        print_success "Main file found"
    else
        print_error "Main file not found"
        return 1
    fi
    
    # Try to import the module
    node -e "require('./dist/index.js')" 2>/dev/null
    if [ $? -eq 0 ]; then
        print_success "Module loads successfully"
    else
        print_error "Module failed to load"
        return 1
    fi
    
    return 0
}

# Display completion message
show_completion() {
    echo ""
    echo -e "${GREEN}╔════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║   Installation Complete! 🎉            ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════╝${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Run 'npm start' to launch OnChainAgents"
    echo "2. Use '/oca:help' in Claude Code to see available commands"
    echo "3. Connect to Hive Intelligence MCP: https://hiveintelligence.xyz/mcp"
    echo ""
    echo "Available commands:"
    echo "  /oca:analyze - Comprehensive token analysis"
    echo "  /oca:research - Deep fundamental research"
    echo "  /oca:security - Security and rug detection"
    echo "  /oca:hunt - Find alpha opportunities"
    echo "  /oca:track - Track whale wallets"
    echo "  /oca:sentiment - Analyze social sentiment"
    echo ""
    echo "Documentation: https://github.com/yourusername/onchainagents-fun"
    echo "Support: https://discord.gg/onchainagents"
}

# Main installation flow
main() {
    clear
    print_header
    
    # Run installation steps
    check_requirements
    install_dependencies
    build_project
    setup_environment
    setup_claude_code
    run_tests
    
    # Verify everything worked
    if verify_installation; then
        show_completion
    else
        print_error "Installation failed - please check the errors above"
        exit 1
    fi
}

# Handle Ctrl+C
trap 'echo -e "\n${RED}Installation cancelled${NC}"; exit 1' INT

# Run main function
main